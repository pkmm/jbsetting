<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="D:/aizuoye_pc_v21/server/php/app/Http/routes.php" timestamp="1553828864408">
        <mark key="[" line="91" column="57" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/app/Console/Commands/ImportStudentEntranceYear.php" timestamp="1553756009914">
        <mark key="[" line="56" column="25" />
        <mark key="]" line="56" column="59" />
        <mark key="^" line="56" column="59" />
        <mark key="." line="56" column="59" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" timestamp="1553758226736">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="8483" column="47" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/.env" timestamp="1553758467535">
        <mark key="[" line="65" column="0" />
        <mark key="]" line="65" column="0" />
        <mark key="^" line="65" column="27" />
        <mark key="." line="65" column="0" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/resources/assets/js/components/LetterReply.vue" timestamp="1553828447540">
        <mark key="[" line="229" column="0" />
        <mark key="]" line="229" column="0" />
        <mark key="." line="229" column="0" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/resources/assets/js/components/LetterManageTable.vue" timestamp="1553827743640">
        <mark key="[" line="163" column="22" />
      </file>
      <file name="D:/aizuoye_pc_v21/server/php/app/Manager/JPushManager.php" timestamp="1553829652338">
        <mark key="'" line="21" column="0" />
        <mark key="[" line="225" column="41" />
        <mark key="]" line="155" column="0" />
        <mark key="." line="155" column="0" />
        <mark key="^" line="155" column="0" />
      </file>
      <file name="D:/a_web_app/app_server_dev/server/php/app/Console/Commands/ImportUserEntranceYear.php" timestamp="1553759490154">
        <mark key="[" line="78" column="10" />
        <mark key="]" line="78" column="10" />
        <mark key="." line="78" column="10" />
      </file>
    </filemarks>
    <jumps>
      <jump line="10" column="52" filename="D:/a_web_app/101760/client/h5/src/components/completeStudentInfo/completeStudentInfo.jsx" />
      <jump line="162" column="1" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="139" column="79" filename="D:/aizuoye_pc_v21/server/php/app/Services/Portal/TeacherService.php" />
      <jump line="24" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Services/Portal/TeacherService.php" />
      <jump line="290" column="25" filename="D:/a_web_app/101760/client/h5/src/views/paper-source/source-edit.jsx" />
      <jump line="51" column="5" filename="D:/a_web_app/101760/client/h5/src/views/layout/main.js" />
      <jump line="110" column="39" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="83" column="0" filename="D:/a_web_app/101760/client/h5/src/views/layout/main.js" />
      <jump line="156" column="27" filename="D:/a_web_app/101760/client/h5/src/routes.js" />
      <jump line="23" column="6" filename="D:/aizuoye_pc_v21/server/php/app/Manager/TeacherManager.php" />
      <jump line="246" column="20" filename="D:/aizuoye_pc_v21/server/php/tests/V2_4/UserTest.php" />
      <jump line="402" column="8" filename="D:/aizuoye_pc_v21/server/php/tests/V2_4/SchoolClassTest.php" />
      <jump line="246" column="52" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="164" column="63" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-20.log" />
      <jump line="32" column="45" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-20.log" />
      <jump line="55" column="49" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-20.log" />
      <jump line="0" column="0" filename="D:/a_web_app/101760/server/php/storage/logs/laravel.log" />
      <jump line="63" column="67" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-21.log" />
      <jump line="4558" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-21.log" />
      <jump line="82" column="92" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-21.log" />
      <jump line="270" column="23" filename="D:/aizuoye_pc_v21/server/php/app/Manager/TeacherManager.php" />
      <jump line="25" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Manager/TeacherManager.php" />
      <jump line="248" column="30" filename="D:/aizuoye_pc_v21/server/php/app/Manager/TeacherManager.php" />
      <jump line="7699" column="80" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-21.log" />
      <jump line="0" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-21.log" />
      <jump line="183" column="37" filename="D:/a_web_app/101760/server/php/app/Manager/PaperManager.php" />
      <jump line="1499" column="100" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-02-22.log" />
      <jump line="114" column="46" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PortalManager.php" />
      <jump line="1058" column="13" filename="D:/aizuoye_pc_v21/server/php/app/Manager/UserManager.php" />
      <jump line="130" column="58" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PortalManager.php" />
      <jump line="22" column="24" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PortalManager.php" />
      <jump line="124" column="80" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PortalManager.php" />
      <jump line="447" column="45" filename="D:/aizuoye_pc_v21/server/php/tests/Portal/TeacherTest.php" />
      <jump line="39" column="29" filename="D:/aizuoye_pc_v21/server/php/tests/Portal/SchoolTest.php" />
      <jump line="191" column="33" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="295" column="14" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="26" column="40" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="259" column="72" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="300" column="14" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="299" column="15" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="255" column="26" filename="D:/a_web_app/101760/client/h5/src/components/modifyUserInfo/modifyUserInfo.jsx" />
      <jump line="26" column="6" filename="D:/aizuoye_pc_v21/server/php/app/Manager/TeacherManager.php" />
      <jump line="33" column="17" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="254" column="48" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="26" column="17" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="252" column="31" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="0" column="0" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="248" column="60" filename="D:/a_web_app/101760/client/h5/src/views/user/user-info.js" />
      <jump line="26" column="0" filename="D:/a_web_app/101760/client/h5/API/Generated/v2/paper/ReCorrectMessage.js" />
      <jump line="185" column="35" filename="D:/a_web_app/101760/client/h5/src/routes.js" />
      <jump line="0" column="0" filename="D:/a_web_app/101760/client/h5/src/routes.js" />
      <jump line="214" column="4" filename="D:/aizuoye_pc_v21/server/php/app/Services/V2_3/AdminLetterService.php" />
      <jump line="129" column="47" filename="D:/a_web_app/app_server_dev/server/php/app/Services/V2_5/User/UserMapper.php" />
      <jump line="83" column="27" filename="D:/aizuoye_pc_v21/server/php/app/Manager/AdminUserManager.php" />
      <jump line="310" column="6" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="186" column="6" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="29" column="12" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="189" column="14" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="28" column="52" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="256" column="6" filename="D:/aizuoye_pc_v21/server/php/resources/assets/js/components/LetterReply.vue" />
      <jump line="227" column="32" filename="D:/a_web_app/app_server_dev/server/php/app/Manager/HistoryMathManager.php" />
      <jump line="417" column="0" filename="D:/a_web_app/app_server_dev/server/php/app/Manager/HistoryMathManager.php" />
      <jump line="181" column="28" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="22" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="106" column="10" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="628" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="438" column="11" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="593" column="17" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="123" column="13" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushManager.php" />
      <jump line="116" column="45" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-03-21.log" />
      <jump line="0" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel.error-2019-03-21.log" />
      <jump line="338" column="13" filename="D:/a_web_app/app_server_dev/server/php/app/Managers/Letter/LetterManager.php" />
      <jump line="60" column="122" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel.error-2019-03-25.log" />
      <jump line="0" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel.error-2019-03-25.log" />
      <jump line="0" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-03-25.log" />
      <jump line="408" column="68" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-03-25.log" />
      <jump line="151" column="61" filename="D:/aizuoye_pc_v21/server/php/app/Manager/PushAllManager.php" />
      <jump line="71" column="31" filename="D:/aizuoye_pc_v21/server/php/app/Manager/AppPushManager.php" />
      <jump line="72" column="38" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-03-25.log" />
      <jump line="8" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel-2019-03-25.log" />
      <jump line="4" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/laravel.error-2019-03-25.log" />
      <jump line="7" column="0" filename="D:/aizuoye_pc_v21/server/php/storage/logs/jpush.log" />
      <jump line="231" column="8" filename="D:/aizuoye_pc_v21/server/php/app/Manager/JPushManager.php" />
      <jump line="774" column="52" filename="D:/aizuoye_pc_v21/server/php/API/Generated/V2_5/model/HomepagePosterModel.php" />
      <jump line="29" column="35" filename="D:/a_web_app/app_server_dev/server/php/app/Managers/Letter/LetterAdminManager.php" />
      <jump line="44" column="55" filename="D:/a_web_app/app_server_dev/server/php/app/Services/V2_5/AdminLetterService.php" />
      <jump line="288" column="0" filename="D:/a_web_app/app_server_dev/server/php/app/Services/V2_5/AdminLetterService.php" />
      <jump line="10" column="0" filename="D:/a_web_app/app_server_dev/server/php/app/Services/V2_5/AdminLetterService.php" />
      <jump line="3" column="2" filename="D:/a_web_app/app_server_dev/server/php/resources/assets/js/components/constants/LetterSendType.js" />
      <jump line="2" column="6" filename="D:/a_web_app/app_server_dev/server/php/resources/assets/js/components/constants/LetterSendType.js" />
      <jump line="46" column="12" filename="D:/a_web_app/app_server_dev/server/php/resources/assets/js/components/lettersSendDetail/GroupLetterSendDetail.vue" />
      <jump line="422" column="0" filename="D:/a_web_app/app_server_dev/server/php/app/Managers/Letter/LetterAdminManager.php" />
      <jump line="22" column="0" filename="D:/a_web_app/app_server_dev/server/php/app/Managers/Letter/LetterAdminManager.php" />
      <jump line="16" column="65" filename="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" />
      <jump line="12" column="55" filename="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" />
      <jump line="11" column="54" filename="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" />
      <jump line="8282" column="93" filename="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" />
      <jump line="0" column="0" filename="D:/a_web_app/app_server_dev/server/php/storage/logs/laravel.error-2019-03-28.log" />
      <jump line="155" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Manager/JPushManager.php" />
      <jump line="21" column="0" filename="D:/aizuoye_pc_v21/server/php/app/Manager/JPushManager.php" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICdzdWInCg==</text>
      </register>
      <register name="-" type="4">
        <text>cellValue</text>
      </register>
      <register name="/" type="4">
        <text>createOr</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">PHRlbXBsYXRlPgogICAgPGRpdj4KICAgICAgICA8ZWwtdGFibGUKICAgICAgICAgICAgICAgIDpkYXRhPSJsZXR0ZXJzIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyIKICAgICAgICA+CiAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4KICAgICAgICAgICAgICAgICAgICBwcm9wPSJpZCIKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSUQiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CgogICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uCiAgICAgICAgICAgICAgICAgICAgcHJvcD0idGl0bGUiCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlRpdGxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uCiAgICAgICAgICAgICAgICAgICAgcHJvcD0iY29udGVudCIKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iQ29udGVudCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgPGVsLXRhYmxlLWNvbHVtbgogICAgICAgICAgICAgICAgICAgIHByb3A9ImNyZWF0ZWRfYXQiCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkNyZWF0ZWRBdCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgPGVsLXRhYmxlLWNvbHVtbgogICAgICAgICAgICAgICAgICAgIGxhYmVsPSK3osvN17TMrCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZWwtcHJvZ3Jlc3MgOnBlcmNlbnRhZ2U9Ik1hdGgucm91bmQoc2NvcGUucm93LnB1c2hlZF9jb3VudCAvIHNjb3BlLnJvdy50b3RhbF9jb3VudCkiPjwvZWwtcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KCiAgICAgICAgPC9lbC10YWJsZT4KICAgICAgICA8ZGl2IGNsYXNzPSJibG9jayIgc3R5bGU9ImZsb2F0OnJpZ2h0OyI+CiAgICAgICAgICAgIDxlbC1wYWdpbmF0aW9uCiAgICAgICAgICAgICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0LCBqdW1wZXIiCiAgICAgICAgICAgICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIgogICAgICAgICAgICAgICAgICAgIDpjdXJyZW50LXBhZ2Uuc3luYz0icGFnZSIKICAgICAgICAgICAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9Im9uQ3VycmVudENoYW5nZSIKICAgICAgICAgICAgICAgICAgICA6cGFnZS1zaXplcz0iWzEwLCAxMDAsIDIwMCwgMzAwXSIKICAgICAgICAgICAgICAgICAgICA6cGFnZS1zaXplPSJwZXJwYWdlIgogICAgICAgICAgICAgICAgICAgIDp0b3RhbD0idG90YWwiPgogICAgICAgICAgICA8L2VsLXBhZ2luYXRpb24+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC90ZW1wbGF0ZT4KCjxzY3JpcHQ+CiAgaW1wb3J0IHtMZXR0ZXJTZW5kVHlwZX0gZnJvbSAnLi4vY29uc3RhbnRzL0xldHRlclNlbmRUeXBlJzsKCiAgZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogIkdyb3VwTGV0dGVyU2VuZERldGFpbCIsCiAgICBkYXRhKCkgewogICAgICByZXR1cm4gewogICAgICAgIGxldHRlcnM6IFtdLAogICAgICAgIHBhZ2U6IDEsCiAgICAgICAgcGVycGFnZTogMTAsCiAgICAgICAgdG90YWw6IDAsCiAgICAgIH07CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgdGhpcy5nZXREYXRhKCk7CiAgICB9LAogICAgbWV0aG9kczogewogICAgICBnZXREYXRhKCkgewogICAgICAgIGF4aW9zLnBvc3QoJy92Ml81L2FkbWluTGV0dGVyL2dldF9sZXR0ZXJzX3NlbmRfZGV0YWlsX2J5X21lJywgewogICAgICAgICAgcGFnZTogdGhpcy5wYWdlLAogICAgICAgICAgcGVycGFnZTogdGhpcy5wZXJwYWdlLAogICAgICAgICAgbGV0dGVyX3NlbmRfdHlwZTogTGV0dGVyU2VuZFR5cGUuR1JPVVAsCiAgICAgICAgfSkudGhlbihyZXNwID0+IHsKICAgICAgICAgIHRoaXMubGV0dGVycyA9IHJlc3AuZGF0YS5sZXR0ZXJfc2VuZF9kZXRhaWxzOwogICAgICAgICAgdGhpcy50b3RhbCA9IHJlc3AuZGF0YS50b3RhbDsKICAgICAgICB9KQogICAgICB9LAogICAgICBoYW5kbGVTaXplQ2hhbmdlKHNpemUpIHsKICAgICAgICB0aGlzLnBlcnBhZ2UgPSBzaXplOwogICAgICAgIHRoaXMuZ2V0RGF0YSgpOwogICAgICB9LAogICAgICBvbkN1cnJlbnRDaGFuZ2UocGFnZSkgewogICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7CiAgICAgICAgdGhpcy5nZXREYXRhKCk7CiAgICAgIH0KICAgIH0KICB9Cjwvc2NyaXB0PgoKPHN0eWxlIHNjb3BlZD4KCjwvc3R5bGU+Cg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICdzdWInCg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gJ3NpbmdsZScpIHsKICAgICAgICB0aGlzLnRpdGxlID0gJ7Cu1/fStb/Nt/4nOwogICAgICB9Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICBjb25zb2xlLmxvZyhuKTsK</text>
      </register>
      <register name="5" type="4">
        <text encoding="base64">ZmluYWxseSB7CiAgICAgICAgICAgICR0aGlzLT5zYS0+Y2xvc2UoKTsKICAgICAgICB9</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAkc2EgPSBTZW5zb3JzTWFuYWdlcjo6Z2V0U2Vuc29yc0FuYWx5dGljcygpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">U0FfU0VSVkVSX1VSTCA9IGh0dHBzOi8vc2EuenVveWUuYWk6ODEwNi9zYT9wcm9qZWN0PWRlZmF1bHQK</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">[2019-03-28 00:00:02] local.ERROR: [trace_id:2024502][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:05] local.ERROR: [trace_id:2446058][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:08] local.ERROR: [trace_id:2235597][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:11] local.ERROR: [trace_id:4331168][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:14] local.ERROR: [trace_id:5830011][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:17] local.ERROR: [trace_id:9339394][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:20] local.ERROR: [trace_id:3063874][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:23] local.ERROR: [trace_id:5331540][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:26] local.ERROR: [trace_id:5939570][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:29] local.ERROR: [trace_id:4770218][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:32] local.ERROR: [trace_id:7547596][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:35] local.ERROR: [trace_id:8218710][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:38] local.ERROR: [trace_id:1328812][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:41] local.ERROR: [trace_id:1586696][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:44] local.ERROR: [trace_id:2641255][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:47] local.ERROR: [trace_id:9030287][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:50] local.ERROR: [trace_id:4541567][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:53] local.ERROR: [trace_id:1366477][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:56] local.ERROR: [trace_id:8031226][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:59] local.ERROR: [trace_id:8183273][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:02] local.ERROR: [trace_id:6698673][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:05] local.ERROR: [trace_id:4450790][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:08] local.ERROR: [trace_id:5729277][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:11] local.ERROR: [trace_id:6055638][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:14] local.ERROR: [trace_id:8687015][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:17] local.ERROR: [trace_id:6932886][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:20] local.ERROR: [trace_id:4402044][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:23] local.ERROR: [trace_id:8482869][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:26] local.ERROR: [trace_id:7676009][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:29] local.ERROR: [trace_id:9859484][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:32] local.ERROR: [trace_id:7247419][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:35] local.ERROR: [trace_id:2575696][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:38] local.ERROR: [trace_id:8633514][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:41] local.ERROR: [trace_id:1451205][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:44] local.ERROR: [trace_id:3886783][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:47] local.ERROR: [trace_id:5081241][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:50] local.ERROR: [trace_id:8474375][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:53] local.ERROR: [trace_id:6776206][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:56] local.ERROR: [trace_id:7196834][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:59] local.ERROR: [trace_id:6981081][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:02] local.ERROR: [trace_id:8380260][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:05] local.ERROR: [trace_id:1387769][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:08] local.ERROR: [trace_id:3323603][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:11] local.ERROR: [trace_id:3616491][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:14] local.ERROR: [trace_id:7255666][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:17] local.ERROR: [trace_id:2154515][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:20] local.ERROR: [trace_id:8874488][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:23] local.ERROR: [trace_id:4292562][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:26] local.ERROR: [trace_id:8111850][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:29] local.ERROR: [trace_id:5726389][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:32] local.ERROR: [trace_id:2854634][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:35] local.ERROR: [trace_id:3926279][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:38] local.ERROR: [trace_id:9298922][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:41] local.ERROR: [trace_id:2306056][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:44] local.ERROR: [trace_id:1244851][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:47] local.ERROR: [trace_id:8387350][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:50] local.ERROR: [trace_id:3917934][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:53] local.ERROR: [trace_id:5804181][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:56] local.ERROR: [trace_id:4796532][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:59] local.ERROR: [trace_id:4095617][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:02] local.ERROR: [trace_id:8900471][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:05] local.ERROR: [trace_id:7112132][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:08] local.ERROR: [trace_id:5289758][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:11] local.ERROR: [trace_id:3598198][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:14] local.ERROR: [trace_id:3313025][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:17] local.ERROR: [trace_id:1627148][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:20] local.ERROR: [trace_id:9307461][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:23] local.ERROR: [trace_id:4801949][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:26] local.ERROR: [trace_id:5705953][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:29] local.ERROR: [trace_id:7176043][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:32] local.ERROR: [trace_id:1821521][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:35] local.ERROR: [trace_id:7823938][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:38] local.ERROR: [trace_id:4462521][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:41] local.ERROR: [trace_id:6256112][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:44] local.ERROR: [trace_id:7898518][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:47] local.ERROR: [trace_id:5026041][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:50] local.ERROR: [trace_id:8823961][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:53] local.ERROR: [trace_id:1846040][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:56] local.ERROR: [trace_id:7740144][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:59] local.ERROR: [trace_id:7493201][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:02] local.ERROR: [trace_id:5984721][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:05] local.ERROR: [trace_id:7614800][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:08] local.ERROR: [trace_id:7659204][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:11] local.ERROR: [trace_id:5426096][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:14] local.ERROR: [trace_id:7075739][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:17] local.ERROR: [trace_id:8519256][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:20] local.ERROR: [trace_id:2918839][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:23] local.ERROR: [trace_id:1917276][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:26] local.ERROR: [trace_id:7371290][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:29] local.ERROR: [trace_id:1559004][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:32] local.ERROR: [trace_id:4597114][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:35] local.ERROR: [trace_id:4779184][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:38] local.ERROR: [trace_id:7841534][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:41] local.ERROR: [trace_id:2828055][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:44] local.ERROR: [trace_id:4683671][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:47] local.ERROR: [trace_id:5590372][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:50] local.ERROR: [trace_id:8111881][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:53] local.ERROR: [trace_id:2405938][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:56] local.ERROR: [trace_id:6846271][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:59] local.ERROR: [trace_id:1353589][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:02] local.ERROR: [trace_id:9066054][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:05] local.ERROR: [trace_id:3526413][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:08] local.ERROR: [trace_id:9866308][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:11] local.ERROR: [trace_id:3772048][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:14] local.ERROR: [trace_id:5356489][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:17] local.ERROR: [trace_id:7123049][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:20] local.ERROR: [trace_id:8719787][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:23] local.ERROR: [trace_id:5256753][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:26] local.ERROR: [trace_id:1686530][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:29] local.ERROR: [trace_id:3052638][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:32] local.ERROR: [trace_id:5662438][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:35] local.ERROR: [trace_id:6733652][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:38] local.ERROR: [trace_id:5755878][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:41] local.ERROR: [trace_id:7303425][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:44] local.ERROR: [trace_id:1026979][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:47] local.ERROR: [trace_id:6356433][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:50] local.ERROR: [trace_id:1774951][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:53] local.ERROR: [trace_id:5687385][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:56] local.ERROR: [trace_id:8210924][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:59] local.ERROR: [trace_id:8452072][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:02] local.ERROR: [trace_id:6744622][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:05] local.ERROR: [trace_id:8492287][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:08] local.ERROR: [trace_id:8055932][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:11] local.ERROR: [trace_id:2996178][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:14] local.ERROR: [trace_id:3004172][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:17] local.ERROR: [trace_id:6536182][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:20] local.ERROR: [trace_id:8099232][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:23] local.ERROR: [trace_id:1904385][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:26] local.ERROR: [trace_id:5102508][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:29] local.ERROR: [trace_id:4667110][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:32] local.ERROR: [trace_id:5556590][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:35] local.ERROR: [trace_id:5617015][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:38] local.ERROR: [trace_id:1477063][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:41] local.ERROR: [trace_id:4562895][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:44] local.ERROR: [trace_id:1644083][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:47] local.ERROR: [trace_id:9369790][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:50] local.ERROR: [trace_id:8769080][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:53] local.ERROR: [trace_id:1665298][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:56] local.ERROR: [trace_id:3210105][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:59] local.ERROR: [trace_id:6101964][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:02] local.ERROR: [trace_id:6447593][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:05] local.ERROR: [trace_id:3846965][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:08] local.ERROR: [trace_id:9231175][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:11] local.ERROR: [trace_id:1832142][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:14] local.ERROR: [trace_id:9368650][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:17] local.ERROR: [trace_id:9291390][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:20] local.ERROR: [trace_id:9987710][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:23] local.ERROR: [trace_id:2321967][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:26] local.ERROR: [trace_id:1743760][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:29] local.ERROR: [trace_id:4383574][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:32] local.ERROR: [trace_id:2138861][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:35] local.ERROR: [trace_id:2550594][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:38] local.ERROR: [trace_id:1708257][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:41] local.ERROR: [trace_id:4449155][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:44] local.ERROR: [trace_id:6656128][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:47] local.ERROR: [trace_id:4790900][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:50] local.ERROR: [trace_id:4852873][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:53] local.ERROR: [trace_id:4454699][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:56] local.ERROR: [trace_id:4548688][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:59] local.ERROR: [trace_id:7560469][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:02] local.ERROR: [trace_id:4608082][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:05] local.ERROR: [trace_id:4828460][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:08] local.ERROR: [trace_id:9961011][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:11] local.ERROR: [trace_id:3282964][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:14] local.ERROR: [trace_id:3368576][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:17] local.ERROR: [trace_id:6636869][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:20] local.ERROR: [trace_id:6969293][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:23] local.ERROR: [trace_id:6804697][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:26] local.ERROR: [trace_id:4249114][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:29] local.ERROR: [trace_id:8123155][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:32] local.ERROR: [trace_id:8280585][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:35] local.ERROR: [trace_id:5594245][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:38] local.ERROR: [trace_id:7604848][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:41] local.ERROR: [trace_id:2587562][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:44] local.ERROR: [trace_id:2871895][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:47] local.ERROR: [trace_id:3308345][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:50] local.ERROR: [trace_id:8114457][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:53] local.ERROR: [trace_id:9351812][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:56] local.ERROR: [trace_id:8528994][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:59] local.ERROR: [trace_id:7121085][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:02] local.ERROR: [trace_id:8090746][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:05] local.ERROR: [trace_id:5197182][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:08] local.ERROR: [trace_id:7535556][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:11] local.ERROR: [trace_id:5463610][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:14] local.ERROR: [trace_id:3395534][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:17] local.ERROR: [trace_id:5469660][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:20] local.ERROR: [trace_id:6947063][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:23] local.ERROR: [trace_id:4286990][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:26] local.ERROR: [trace_id:7014599][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:29] local.ERROR: [trace_id:4231250][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:32] local.ERROR: [trace_id:8901441][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:35] local.ERROR: [trace_id:7833009][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:38] local.ERROR: [trace_id:5900830][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:41] local.ERROR: [trace_id:5815302][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:44] local.ERROR: [trace_id:5677431][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:47] local.ERROR: [trace_id:3201623][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:50] local.ERROR: [trace_id:7323850][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:53] local.ERROR: [trace_id:3633257][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:56] local.ERROR: [trace_id:8375583][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:59] local.ERROR: [trace_id:8877595][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:02] local.ERROR: [trace_id:6068349][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:05] local.ERROR: [trace_id:2379852][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:08] local.ERROR: [trace_id:6194186][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:11] local.ERROR: [trace_id:7911249][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:14] local.ERROR: [trace_id:3870939][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:17] local.ERROR: [trace_id:1005271][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:20] local.ERROR: [trace_id:2749327][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:23] local.ERROR: [trace_id:8349442][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:26] local.ERROR: [trace_id:8851647][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:29] local.ERROR: [trace_id:3008769][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:32] local.ERROR: [trace_id:9396925][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:35] local.ERROR: [trace_id:4934357][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:38] local.ERROR: [trace_id:3349371][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:41] local.ERROR: [trace_id:6784081][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:44] local.ERROR: [trace_id:5250023][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:47] local.ERROR: [trace_id:9950772][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:50] local.ERROR: [trace_id:3127706][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:53] local.ERROR: [trace_id:7595619][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:56] local.ERROR: [trace_id:9093458][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:59] local.ERROR: [trace_id:8087748][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:02] local.ERROR: [trace_id:2434150][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:05] local.ERROR: [trace_id:5765029][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:08] local.ERROR: [trace_id:2822896][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:11] local.ERROR: [trace_id:3321112][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:14] local.ERROR: [trace_id:8635398][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:17] local.ERROR: [trace_id:4071127][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:20] local.ERROR: [trace_id:2607176][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:23] local.ERROR: [trace_id:1696208][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:26] local.ERROR: [trace_id:8149848][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:29] local.ERROR: [trace_id:1711056][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:32] local.ERROR: [trace_id:9255733][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:35] local.ERROR: [trace_id:6930134][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:38] local.ERROR: [trace_id:2412175][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:41] local.ERROR: [trace_id:6939137][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:44] local.ERROR: [trace_id:4688946][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:47] local.ERROR: [trace_id:3323171][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:50] local.ERROR: [trace_id:8570611][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:53] local.ERROR: [trace_id:7396779][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:56] local.ERROR: [trace_id:3727311][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:59] local.ERROR: [trace_id:7300167][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:02] local.ERROR: [trace_id:3577320][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:05] local.ERROR: [trace_id:4528535][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:08] local.ERROR: [trace_id:1245150][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor
</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">[2019-03-28 00:00:02] local.ERROR: [trace_id:2024502][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:05] local.ERROR: [trace_id:2446058][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:08] local.ERROR: [trace_id:2235597][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:11] local.ERROR: [trace_id:4331168][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:14] local.ERROR: [trace_id:5830011][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:17] local.ERROR: [trace_id:9339394][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:20] local.ERROR: [trace_id:3063874][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:23] local.ERROR: [trace_id:5331540][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:26] local.ERROR: [trace_id:5939570][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:29] local.ERROR: [trace_id:4770218][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:32] local.ERROR: [trace_id:7547596][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:35] local.ERROR: [trace_id:8218710][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:38] local.ERROR: [trace_id:1328812][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:41] local.ERROR: [trace_id:1586696][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:44] local.ERROR: [trace_id:2641255][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:47] local.ERROR: [trace_id:9030287][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:50] local.ERROR: [trace_id:4541567][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:53] local.ERROR: [trace_id:1366477][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:56] local.ERROR: [trace_id:8031226][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:00:59] local.ERROR: [trace_id:8183273][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:02] local.ERROR: [trace_id:6698673][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:05] local.ERROR: [trace_id:4450790][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:08] local.ERROR: [trace_id:5729277][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:11] local.ERROR: [trace_id:6055638][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:14] local.ERROR: [trace_id:8687015][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:17] local.ERROR: [trace_id:6932886][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:20] local.ERROR: [trace_id:4402044][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:23] local.ERROR: [trace_id:8482869][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:26] local.ERROR: [trace_id:7676009][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:29] local.ERROR: [trace_id:9859484][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:32] local.ERROR: [trace_id:7247419][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:35] local.ERROR: [trace_id:2575696][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:38] local.ERROR: [trace_id:8633514][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:41] local.ERROR: [trace_id:1451205][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:44] local.ERROR: [trace_id:3886783][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:47] local.ERROR: [trace_id:5081241][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:50] local.ERROR: [trace_id:8474375][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:53] local.ERROR: [trace_id:6776206][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:56] local.ERROR: [trace_id:7196834][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:01:59] local.ERROR: [trace_id:6981081][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:02] local.ERROR: [trace_id:8380260][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:05] local.ERROR: [trace_id:1387769][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:08] local.ERROR: [trace_id:3323603][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:11] local.ERROR: [trace_id:3616491][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:14] local.ERROR: [trace_id:7255666][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:17] local.ERROR: [trace_id:2154515][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:20] local.ERROR: [trace_id:8874488][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:23] local.ERROR: [trace_id:4292562][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:26] local.ERROR: [trace_id:8111850][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:29] local.ERROR: [trace_id:5726389][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:32] local.ERROR: [trace_id:2854634][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:35] local.ERROR: [trace_id:3926279][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:38] local.ERROR: [trace_id:9298922][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:41] local.ERROR: [trace_id:2306056][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:44] local.ERROR: [trace_id:1244851][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:47] local.ERROR: [trace_id:8387350][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:50] local.ERROR: [trace_id:3917934][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:53] local.ERROR: [trace_id:5804181][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:56] local.ERROR: [trace_id:4796532][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:02:59] local.ERROR: [trace_id:4095617][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:02] local.ERROR: [trace_id:8900471][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:05] local.ERROR: [trace_id:7112132][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:08] local.ERROR: [trace_id:5289758][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:11] local.ERROR: [trace_id:3598198][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:14] local.ERROR: [trace_id:3313025][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:17] local.ERROR: [trace_id:1627148][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:20] local.ERROR: [trace_id:9307461][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:23] local.ERROR: [trace_id:4801949][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:26] local.ERROR: [trace_id:5705953][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:29] local.ERROR: [trace_id:7176043][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:32] local.ERROR: [trace_id:1821521][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:35] local.ERROR: [trace_id:7823938][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:38] local.ERROR: [trace_id:4462521][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:41] local.ERROR: [trace_id:6256112][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:44] local.ERROR: [trace_id:7898518][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:47] local.ERROR: [trace_id:5026041][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:50] local.ERROR: [trace_id:8823961][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:53] local.ERROR: [trace_id:1846040][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:56] local.ERROR: [trace_id:7740144][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:03:59] local.ERROR: [trace_id:7493201][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:02] local.ERROR: [trace_id:5984721][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:05] local.ERROR: [trace_id:7614800][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:08] local.ERROR: [trace_id:7659204][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:11] local.ERROR: [trace_id:5426096][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:14] local.ERROR: [trace_id:7075739][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:17] local.ERROR: [trace_id:8519256][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:20] local.ERROR: [trace_id:2918839][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:23] local.ERROR: [trace_id:1917276][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:26] local.ERROR: [trace_id:7371290][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:29] local.ERROR: [trace_id:1559004][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:32] local.ERROR: [trace_id:4597114][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:35] local.ERROR: [trace_id:4779184][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:38] local.ERROR: [trace_id:7841534][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:41] local.ERROR: [trace_id:2828055][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:44] local.ERROR: [trace_id:4683671][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:47] local.ERROR: [trace_id:5590372][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:50] local.ERROR: [trace_id:8111881][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:53] local.ERROR: [trace_id:2405938][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:56] local.ERROR: [trace_id:6846271][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:04:59] local.ERROR: [trace_id:1353589][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:02] local.ERROR: [trace_id:9066054][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:05] local.ERROR: [trace_id:3526413][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:08] local.ERROR: [trace_id:9866308][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:11] local.ERROR: [trace_id:3772048][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:14] local.ERROR: [trace_id:5356489][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:17] local.ERROR: [trace_id:7123049][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:20] local.ERROR: [trace_id:8719787][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:23] local.ERROR: [trace_id:5256753][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:26] local.ERROR: [trace_id:1686530][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:29] local.ERROR: [trace_id:3052638][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:32] local.ERROR: [trace_id:5662438][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:35] local.ERROR: [trace_id:6733652][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:38] local.ERROR: [trace_id:5755878][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:41] local.ERROR: [trace_id:7303425][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:44] local.ERROR: [trace_id:1026979][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:47] local.ERROR: [trace_id:6356433][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:50] local.ERROR: [trace_id:1774951][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:53] local.ERROR: [trace_id:5687385][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:56] local.ERROR: [trace_id:8210924][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:05:59] local.ERROR: [trace_id:8452072][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:02] local.ERROR: [trace_id:6744622][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:05] local.ERROR: [trace_id:8492287][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:08] local.ERROR: [trace_id:8055932][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:11] local.ERROR: [trace_id:2996178][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:14] local.ERROR: [trace_id:3004172][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:17] local.ERROR: [trace_id:6536182][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:20] local.ERROR: [trace_id:8099232][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:23] local.ERROR: [trace_id:1904385][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:26] local.ERROR: [trace_id:5102508][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:29] local.ERROR: [trace_id:4667110][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:32] local.ERROR: [trace_id:5556590][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:35] local.ERROR: [trace_id:5617015][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:38] local.ERROR: [trace_id:1477063][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:41] local.ERROR: [trace_id:4562895][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:44] local.ERROR: [trace_id:1644083][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:47] local.ERROR: [trace_id:9369790][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:50] local.ERROR: [trace_id:8769080][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:53] local.ERROR: [trace_id:1665298][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:56] local.ERROR: [trace_id:3210105][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:06:59] local.ERROR: [trace_id:6101964][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:02] local.ERROR: [trace_id:6447593][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:05] local.ERROR: [trace_id:3846965][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:08] local.ERROR: [trace_id:9231175][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:11] local.ERROR: [trace_id:1832142][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:14] local.ERROR: [trace_id:9368650][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:17] local.ERROR: [trace_id:9291390][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:20] local.ERROR: [trace_id:9987710][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:23] local.ERROR: [trace_id:2321967][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:26] local.ERROR: [trace_id:1743760][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:29] local.ERROR: [trace_id:4383574][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:32] local.ERROR: [trace_id:2138861][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:35] local.ERROR: [trace_id:2550594][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:38] local.ERROR: [trace_id:1708257][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:41] local.ERROR: [trace_id:4449155][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:44] local.ERROR: [trace_id:6656128][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:47] local.ERROR: [trace_id:4790900][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:50] local.ERROR: [trace_id:4852873][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:53] local.ERROR: [trace_id:4454699][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:56] local.ERROR: [trace_id:4548688][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:07:59] local.ERROR: [trace_id:7560469][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:02] local.ERROR: [trace_id:4608082][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:05] local.ERROR: [trace_id:4828460][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:08] local.ERROR: [trace_id:9961011][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:11] local.ERROR: [trace_id:3282964][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:14] local.ERROR: [trace_id:3368576][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:17] local.ERROR: [trace_id:6636869][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:20] local.ERROR: [trace_id:6969293][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:23] local.ERROR: [trace_id:6804697][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:26] local.ERROR: [trace_id:4249114][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:29] local.ERROR: [trace_id:8123155][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:32] local.ERROR: [trace_id:8280585][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:35] local.ERROR: [trace_id:5594245][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:38] local.ERROR: [trace_id:7604848][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:41] local.ERROR: [trace_id:2587562][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:44] local.ERROR: [trace_id:2871895][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:47] local.ERROR: [trace_id:3308345][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:50] local.ERROR: [trace_id:8114457][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:53] local.ERROR: [trace_id:9351812][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:56] local.ERROR: [trace_id:8528994][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:08:59] local.ERROR: [trace_id:7121085][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:02] local.ERROR: [trace_id:8090746][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:05] local.ERROR: [trace_id:5197182][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:08] local.ERROR: [trace_id:7535556][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:11] local.ERROR: [trace_id:5463610][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:14] local.ERROR: [trace_id:3395534][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:17] local.ERROR: [trace_id:5469660][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:20] local.ERROR: [trace_id:6947063][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:23] local.ERROR: [trace_id:4286990][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:26] local.ERROR: [trace_id:7014599][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:29] local.ERROR: [trace_id:4231250][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:32] local.ERROR: [trace_id:8901441][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:35] local.ERROR: [trace_id:7833009][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:38] local.ERROR: [trace_id:5900830][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:41] local.ERROR: [trace_id:5815302][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:44] local.ERROR: [trace_id:5677431][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:47] local.ERROR: [trace_id:3201623][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:50] local.ERROR: [trace_id:7323850][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:53] local.ERROR: [trace_id:3633257][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:56] local.ERROR: [trace_id:8375583][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:09:59] local.ERROR: [trace_id:8877595][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:02] local.ERROR: [trace_id:6068349][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:05] local.ERROR: [trace_id:2379852][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:08] local.ERROR: [trace_id:6194186][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:11] local.ERROR: [trace_id:7911249][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:14] local.ERROR: [trace_id:3870939][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:17] local.ERROR: [trace_id:1005271][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:20] local.ERROR: [trace_id:2749327][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:23] local.ERROR: [trace_id:8349442][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:26] local.ERROR: [trace_id:8851647][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:29] local.ERROR: [trace_id:3008769][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:32] local.ERROR: [trace_id:9396925][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:35] local.ERROR: [trace_id:4934357][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:38] local.ERROR: [trace_id:3349371][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:41] local.ERROR: [trace_id:6784081][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:44] local.ERROR: [trace_id:5250023][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:47] local.ERROR: [trace_id:9950772][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:50] local.ERROR: [trace_id:3127706][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:53] local.ERROR: [trace_id:7595619][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:56] local.ERROR: [trace_id:9093458][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:10:59] local.ERROR: [trace_id:8087748][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:02] local.ERROR: [trace_id:2434150][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:05] local.ERROR: [trace_id:5765029][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:08] local.ERROR: [trace_id:2822896][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:11] local.ERROR: [trace_id:3321112][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:14] local.ERROR: [trace_id:8635398][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:17] local.ERROR: [trace_id:4071127][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:20] local.ERROR: [trace_id:2607176][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:23] local.ERROR: [trace_id:1696208][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:26] local.ERROR: [trace_id:8149848][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:29] local.ERROR: [trace_id:1711056][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:32] local.ERROR: [trace_id:9255733][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:35] local.ERROR: [trace_id:6930134][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:38] local.ERROR: [trace_id:2412175][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:41] local.ERROR: [trace_id:6939137][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:44] local.ERROR: [trace_id:4688946][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:47] local.ERROR: [trace_id:3323171][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:50] local.ERROR: [trace_id:8570611][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:53] local.ERROR: [trace_id:7396779][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:56] local.ERROR: [trace_id:3727311][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:11:59] local.ERROR: [trace_id:7300167][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:02] local.ERROR: [trace_id:3577320][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:05] local.ERROR: [trace_id:4528535][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(110): Predis\Connection\StreamConnection->writeRequest(Object(Predis\Command\Redis\HMSET))
#5 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(341): Predis\Connection\AbstractConnection->executeCommand(Object(Predis\Command\Redis\HMSET))
#6 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Client.php(324): Predis\Client->executeCommand(Object(Predis\Command\Redis\HMSET))
#7 [internal function]: Predis\Client->__call('hMSet', Array)
#8 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(88): call_user_func_array(Array, Array)
#9 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Redis\Database.php(137): Illuminate\Redis\Database->command('hMSet', Array)
#10 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php(219): Illuminate\Redis\Database->__call('hMSet', Array)
#11 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(110): Illuminate\Support\Facades\Facade::__callStatic('hMSet', Array)
#12 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(259): App\Manager\RedisManager::hSet('2.1homework:tab...', Array)
#13 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Support\Collection.php(135): App\Manager\RedisManager::App\Manager\{closure}(Object(App\Model\GlobalSetting), 0)
#14 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(260): Illuminate\Support\Collection->each(Object(Closure))
#15 D:\a_web_app\app_server_dev\server\php\app\Manager\RedisManager.php(170): App\Manager\RedisManager::getTableModelsByPrimaryKeyBulk('App\\Model\\Globa...', Array, 'key_name', false, Array)
#16 D:\a_web_app\app_server_dev\server\php\app\Model\GlobalSetting.php(73): App\Manager\RedisManager::getTableModelByPrimaryKey('App\\Model\\Globa...', 'MaintenanceMode', 'key_name')
#17 D:\a_web_app\app_server_dev\server\php\app\Foundation\Application.php(21): App\Model\GlobalSetting::getValueByKeyName('MaintenanceMode', 'off')
#18 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\CheckForMaintenanceMode.php(26): App\Foundation\Application->getMaintenanceMode()
#19 [internal function]: App\Http\Middleware\CheckForMaintenanceMode->handle(Object(Illuminate\Http\Request), Object(Closure))
#20 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#21 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\AddHeaderServerIP.php(20): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#22 [internal function]: App\Http\Middleware\AddHeaderServerIP->handle(Object(Illuminate\Http\Request), Object(Closure))
#23 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#24 D:\a_web_app\app_server_dev\server\php\app\Http\Middleware\GlobalLogger.php(19): Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 [internal function]: App\Http\Middleware\GlobalLogger->handle(Object(Illuminate\Http\Request), Object(Closure))
#26 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(124): call_user_func_array(Array, Array)
#27 [internal function]: Illuminate\Pipeline\Pipeline->Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#28 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(102): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#29 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(122): Illuminate\Pipeline\Pipeline->then(Object(Closure))
#30 D:\a_web_app\app_server_dev\server\php\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(87): Illuminate\Foundation\Http\Kernel->sendRequestThroughRouter(Object(Illuminate\Http\Request))
#31 D:\a_web_app\app_server_dev\server\php\public\index.php(53): Illuminate\Foundation\Http\Kernel->handle(Object(Illuminate\Http\Request))
#32 {main}  
[2019-03-28 00:12:08] local.ERROR: [trace_id:1245150][uid:-1][pid:14428]Predis\Connection\ConnectionException: `AUTH` failed: ERR Client sent AUTH, but no password is set [tcp://127.0.0.1:6379] in D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php:132
Stack trace:
#0 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(263): Predis\Connection\AbstractConnection->onConnectionError('`AUTH` failed: ...', 0)
#1 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\AbstractConnection.php(157): Predis\Connection\StreamConnection->connect()
#2 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(288): Predis\Connection\AbstractConnection->getResource()
#3 D:\a_web_app\app_server_dev\server\php\vendor\predis\predis\src\Connection\StreamConnection.php(395): Predis\Connection\StreamConnection->write('*14\r\n$5\r\nHMSET\r...')
#4 D:\a_web_app\app_server_dev\server\php\vendor
</text>
      </register>
      <register name=":" type="4">
        <text>354</text>
      </register>
    </registers>
    <search>
      <last-search>createOr</last-search>
      <last-offset />
      <last-pattern>createOr</last-pattern>
      <last-replace>~</last-replace>
      <last-substitute>signIn</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxHUkFOREZBVEhFUjJcPg==</entry>
        <entry encoding="base64">XDxURUFDSEVSXD4=</entry>
        <entry>hash</entry>
        <entry encoding="base64">XDx1bnNpZ25lZEludGVnZXJcPg==</entry>
        <entry encoding="base64">XDx0aW1lc3RhbXBcPg==</entry>
        <entry>%s</entry>
        <entry>bindOp</entry>
        <entry>sign</entry>
        <entry>bindOpen</entry>
        <entry>getUserOp</entry>
        <entry>**</entry>
        <entry>signin</entry>
        <entry>signIN</entry>
        <entry>signIn</entry>
        <entry>updateOr</entry>
        <entry>changeStudent</entry>
        <entry>change%</entry>
        <entry>change</entry>
        <entry>changStudentProfile</entry>
        <entry>createOr</entry>
      </history-search>
      <history-cmd>
        <entry>778</entry>
        <entry>173</entry>
        <entry>272</entry>
        <entry>53</entry>
        <entry>/%s/data/weChatDecodeData</entry>
        <entry>255</entry>
        <entry>43</entry>
        <entry>set hls</entry>
        <entry>94,114=</entry>
        <entry>94,.=</entry>
        <entry>179</entry>
        <entry>11,69d</entry>
        <entry>113</entry>
        <entry>141</entry>
        <entry>146</entry>
        <entry>367</entry>
        <entry>358</entry>
        <entry>268</entry>
        <entry>200</entry>
        <entry>354</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>